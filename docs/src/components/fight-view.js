define(["exports","./battle-sim.js"],function(_exports,_battleSim){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.getRadioVal=getRadioVal;_exports.MAX_TERRAIN=_exports.SLOPE_NONE=_exports.SLOPE_DOWN=_exports.SLOPE_UP=_exports.$soloUnitDefault=_exports.$situationDefault=_exports.$encounterDefault=_exports.$combatantDefault=_exports.$actingUnitDefault=_exports.MORALE_FAILURE=_exports.MORALE_SUCCESS=_exports.$terrain=_exports.$soloUnit=_exports.$situation=_exports.$encounter=_exports.$domUtils=_exports.$combatant=_exports.$actingUnit=void 0;var _Mathceil=Math.ceil,_Mathmin=Math.min,_Mathfloor=Math.floor;const SLOPE_UP="SLOPE_UP";_exports.SLOPE_UP=SLOPE_UP;const SLOPE_DOWN="SLOPE_DOWN";_exports.SLOPE_DOWN=SLOPE_DOWN;const SLOPE_NONE$1="SLOPE_NONE";_exports.SLOPE_NONE=SLOPE_NONE$1;const MAX_TERRAIN=100;_exports.MAX_TERRAIN=MAX_TERRAIN;var terrain={SLOPE_UP:SLOPE_UP,SLOPE_DOWN:SLOPE_DOWN,SLOPE_NONE:SLOPE_NONE$1,MAX_TERRAIN:MAX_TERRAIN};_exports.$terrain=terrain;const MORALE_SUCCESS="MORALE_SUCCESS";_exports.MORALE_SUCCESS=MORALE_SUCCESS;const MORALE_FAILURE="STATUS_FALL_BACK";_exports.MORALE_FAILURE=MORALE_FAILURE;class SoloUnit{constructor({unit,environment,armyLeadership=0,status=MORALE_SUCCESS,slope=SLOPE_NONE$1}){this.unit=unit;this.environment=environment;this.armyLeadership=armyLeadership;this.status=status;this.slope=slope;this.status=0<this.moraleRoll()?MORALE_SUCCESS:this.status=MORALE_FAILURE}get terrainSpeedMod(){return(MAX_TERRAIN-this.environment.terrain)/MAX_TERRAIN}get equipmentMod(){return(_battleSim.MAX_EQUIPMENT_WEIGHT-this.unit.carriedWeight)/_battleSim.MAX_EQUIPMENT_WEIGHT}get speed(){return this.unit.baseSpeed*this.terrainSpeedMod*(0,_battleSim.statModFor)(this.unit.energy)*this.equipmentMod}yardsMovedPer(seconds){return this.speed*seconds}get backwardsSpeed(){return this.unit.baseBackwardSpeed*this.terrainSpeedMod*(0,_battleSim.statModFor)(this.unit.energy)*this.equipmentMod}get armor(){return this.unit.armor.defense}get unitTypeTerrainMod(){return{[_battleSim.FOOT_TROOP]:1,[_battleSim.CAVALRY_TROOP]:.5,[_battleSim.ARTILLERY_TROOP]:.25}[this.unit.unitType]}get terrainMod(){return(MAX_TERRAIN-this.environment.terrain)/MAX_TERRAIN*(0,_battleSim.statModFor)(this.unit.openness)*this.unitTypeTerrainMod}get slopeMod(){return{[SLOPE_UP]:.75,[SLOPE_DOWN]:1.25,[SLOPE_NONE$1]:1}[this.slope]}moraleRoll(){return 100*(0,_battleSim.weightedRandom)(3)}performMoraleCheck(){const roll=100*(0,_battleSim.weightedRandom)(3),modifiedMorale=this.unit.morale-roll}}_exports.$actingUnitDefault=SoloUnit;var actingUnit={MORALE_SUCCESS:MORALE_SUCCESS,MORALE_FAILURE:MORALE_FAILURE,default:SoloUnit};_exports.$actingUnit=actingUnit;class Combatant extends SoloUnit{constructor({unit,encounter,target,armyLeadership=0,terrainDefense=0,engagedStands=-1,status=MORALE_SUCCESS,slope=SLOPE_NONE$1}){super({unit,environment:encounter,armyLeadership});this.unit=unit;this.encounter=encounter;this.target=target;this.armyLeadership=armyLeadership;this.terrainDefense=terrainDefense;this.engagedStands=-1>=engagedStands||engagedStands>unit.stands?unit.stands:engagedStands;this.status=status;this.slope=slope;this.casualties=0;this.ammunitionUsed=0;this.yardsFallenback=0;this.yardsPersued=0;this.leaderSurviveRoll=Math.random();this.energyModRoll=(0,_battleSim.weightedRandomTowards)(0,100,10,4);this.moraleModRoll=(0,_battleSim.weightedRandomTowards)(0,100,10,4)}get energyLoss(){return _Mathfloor((this.energyModRoll+this.unit.carriedWeight)*(this.encounter.melee?1:.5)*(this.encounter.secondsSpentFighting/_battleSim.SECONDS_PER_TURN))}get moraleLoss(){return _Mathfloor(this.moraleModRoll*this.hardinessMod*(1+this.casualties/this.unit.strength)*(1+this.unit.strength/this.unit.fullStrength))}get attacksRequireAmmunition(){return!this.encounter.melee}get fallingback(){return this.casualties>this.fallbackCasualtyCount}get persueing(){return!this.fallingback&&0<this.yardsPersued}get fallbackCasualtyCount(){return this.unit.strength*(this.unit.fallback/100)}get leadershipLoss(){return this.casualties/this.unit.strength>this.leaderSurviveRoll?_Mathmin(30,this.unit.leadership):0}get hardinessMod(){return(_battleSim.MAX_STAT-this.unit.experience)/_battleSim.MAX_STAT}get inchesPersued(){return _Mathceil(this.yardsPersued/_battleSim.YARDS_PER_INCH)}get inchesFallenback(){return _Mathceil(this.yardsFallenback/_battleSim.YARDS_PER_INCH)}get modifiedMeleeVolume(){return this.unit.meleeWeapon.volume}get modifiedRangedVolume(){return(0,_battleSim.modVolume)(this.unit.rangedWeapon.volume,this.unit.rangedWeapon.range,this.encounter.yardsOfSeparation)}get volume(){return this.encounter.melee?this.modifiedMeleeVolume:this.modifiedRangedVolume}get modifiedVolume(){return this.volume*this.volumeModifier}get volumeModifier(){return(0,_battleSim.statModFor)(this.unit.energy)*this.engagedMod*this.terrainMod}get targetTroopType(){return this.target.unitType===_battleSim.FOOT_TROOP?_battleSim.POWER_VS_FOOT:_battleSim.POWER_VS_MOUNTED}get weaponTypeForEncounter(){return this.encounter.melee?_battleSim.MELEE_WEAPON:_battleSim.RANGED_WEAPON}get power(){return this.unit[this.weaponTypeForEncounter][this.targetTroopType]}get modifiedPower(){return this.power*this.powerModifier}get skill(){return this.encounter.melee?this.unit.meleeSkill:this.unit.rangedSkill}get engagedMod(){return this.engagedStands/this.unit.stands}get powerModifier(){return this.slopeMod}get skillRoll(){return Math.random()*this.skill*(0,_battleSim.statModFor)(this.unit.energy)}get powerRoll(){return Math.random()*this.modifiedPower}get armorRoll(){return Math.random()*this.armor}get secondsPerAttack(){return this.unit.strength*this.modifiedVolume/_battleSim.SECONDS_IN_AN_HOUR}attacksForTime(duration){return this.unit.strength*this.modifiedVolume*(duration/_battleSim.SECONDS_IN_AN_HOUR)}battleReport(){return`${this.casualtyMessage} ${this.leadershipMessage}`}exactBattleReport(){return`${this.unit.name} -- ${this.status} -- Casualties: ${this.casualties} -- Energy Loss: ${this.energyLoss} -- Morale Loss: ${this.moraleLoss} -- Leadership Loss: ${this.leadershipLoss}`}updates(delay){return{id:this.unit.id,changes:this.changes(delay)}}changes(delay){return[{prop:"strength",value:this.unit.strength-this.casualties},{prop:"energy",value:this.unit.energy-this.energyLoss},{prop:"morale",value:this.unit.morale-this.moraleLoss},{prop:"leadership",value:this.unit.leadership-this.leadershipLoss},{prop:"nextAction",value:this.unit.nextAction+delay}]}get casualtyMessage(){if(this.casualties>this.unit.strength){return`${this.unit.name} was totally destroyed.`}else if(this.casualties>.75*this.unit.strength){return`${this.unit.name} sustained terrible casualties. Almost the whole unit was destroyed.`}else if(this.casualties>.5*this.unit.strength){return`${this.unit.name} sustained terrible casualties. Over half the unit is destroyed.`}else if(this.casualties>.3*this.unit.strength){return`${this.unit.name} sustained terrible casualties.`}else if(this.casualties>.2*this.unit.strength){return`${this.unit.name} sustained grave casualties.`}else if(this.casualties>.15*this.unit.strength){return`${this.unit.name} sustained massive casualties.`}else if(this.casualties>.1*this.unit.strength){return`${this.unit.name} sustained major casualties.`}else if(this.casualties>.5*this.unit.strength){return`${this.unit.name} sustained significant casualties.`}else if(this.casualties>.03*this.unit.strength){return`${this.unit.name} sustained noticable casualties.`}else if(this.casualties>.02*this.unit.strength){return`${this.unit.name} sustained minor casualties.`}else if(0<this.casualties){return`${this.unit.name} sustained almost no casualties.`}else{return`${this.unit.name} sustained no casualties.`}}get leadershipMessage(){if(this.leadershipLoss>this.unit.leadership){return`${this.unit.name} lost all of their leaders during the fight. They have no one to command them.`}else if(this.leadershipLoss>.5*this.unit.leadership){return`${this.unit.name} lost their captain during the fight.`}else if(this.leadershipLoss>.25*this.unit.leadership){return`${this.unit.name} lost a lieutenant during the fight.`}else if(0<this.leadershipLoss){return`${this.unit.name} lost some of their sergeant's during the fight.`}else{return``}}}_exports.$combatantDefault=Combatant;var combatant={default:Combatant};_exports.$combatant=combatant;function getRadioVal(container,name){for(var val,radios=container.querySelectorAll(`[name="${name}"]`),i=0,len=radios.length;i<len;i++){if(radios[i].checked){val=radios[i].value;break}}return val}var domUtils={getRadioVal:getRadioVal};_exports.$domUtils=domUtils;class Encounter{constructor({attacker,attackerTerrainDefense=0,attackerArmyLeadership=0,attackerEngagedStands=-1,defender,defenderTerrainDefense=0,defenderArmyLeadership=0,defenderEngagedStands=-1,melee=!0,separation=0,terrain=0,slope=SLOPE_NONE$1}){this.melee=melee;this.separation=separation;this.terrain=terrain;this.slope=slope;this.attacker=new Combatant({unit:attacker,encounter:this,target:defender,attackerTerrainDefense,attackerArmyLeadership,attackerEngagedStands,slope:this.attackerSlope});this.defender=new Combatant({unit:defender,encounter:this,target:attacker,defenderTerrainDefense,defenderArmyLeadership,defenderEngagedStands,slope:this.defenderSlope})}attackerEngages(){let secondsOfCombat=(0,_battleSim.combat)(this.attacker,this.defender,_battleSim.SECONDS_PER_TURN),actionMessage=``;if(this.attacker.fallingback&&1<=this.attacker.inchesFallenback){actionMessage+=`${this.attacker.unit.name} fell back ${this.defender.inchesFallenback} inch. `;if(this.defender.persueing&&2<=this.defender.inchesPersued){actionMessage+=`${this.defender.unit.name} persued ${this.defender.inchesPersued} inch. `}}if(this.defender.fallingback&&1<=this.defender.inchesFallenback){actionMessage+=`${this.defender.unit.name} fell back ${this.defender.inchesFallenback} inch.`;if(this.attacker.persueing&&2<=this.attacker.inchesPersued){actionMessage+=`${this.attacker.unit.name} persued ${this.attacker.inchesPersued} inch.`}}if(1<this.inchesDefenderFled){return`${actionMessage} ${attackerMessage} ${this.defender.unit.name} fled ${this.inchesDefenderFled} inches but was then caught by ${this.attacker.unit.name}. ${this.timeEngagedMessage(secondsOfCombat)}`}else if(this.defenderFled){return`${actionMessage} ${this.defender.unit.name} attempted to fall back but was quickly caught by ${this.attacker.unit.name}. ${this.timeEngagedMessage(secondsOfCombat)}`}else{return`${actionMessage} ${this.timeEngagedMessage(secondsOfCombat)}`}}get couldNotReachTargetMessage(){if(this.defenderFled){return`${this.defender.unit.name} fled ${this.inchesDefenderFled} inches and ${this.attacker.unit.name} could not reach it's target but may persue up to ${this.inchesOfSeparationAfter} inches.`}else{return`${this.attacker.unit.name} could not reach ${this.defender.unit.name} but moved ${this.inchesAttackerTravelled} inches towards it's target.`}}get chargeMovementMessage(){return`${this.attacker.unit.name} may move his stands ${this.attackerMovementInches} inches in order to make it into combat. Then the defender may follow this by moving his unengaged stands ${this.defenderMovementInches} inches.`}get attackerMovementInches(){return _Mathceil((this.attacker.yardsMovedPer(this.graceWindow)+this.yardsAttackerTravelled)/_battleSim.YARDS_PER_INCH)}get defenderMovementInches(){return _Mathceil(this.defender.yardsMovedPer(this.graceWindow)/_battleSim.YARDS_PER_INCH)}get chargeMessage(){return this.attackerReachedDefender?this.chargeMovementMessage:this.couldNotReachTargetMessage}get graceWindow(){return .5*this.secondsSpentFighting}fight(){this.attacker.performMoraleCheck();this.defender.performMoraleCheck();const actionMessage=this.attackerReachedDefender?this.attackerEngages():``,fullMessage=`${actionMessage} ${this.defender.battleReport()} ${this.attacker.battleReport()}`;return{messages:[fullMessage],updates:[this.defender.updates(_battleSim.SECONDS_PER_TURN),this.attacker.updates(_battleSim.SECONDS_PER_TURN+(0,_battleSim.randomMinutesBetween)(5,10))]}}timeEngagedMessage(seconds){return`They were engaged for ${seconds/_battleSim.SECONDS_IN_AN_MINUTE} minutes.`}get attackerSlope(){return this.slope}get defenderSlope(){if(this.slope===SLOPE_UP){return SLOPE_DOWN}else if(this.slope===SLOPE_DOWN){return SLOPE_UP}else{return SLOPE_NONE$1}}get closeEnoughToFight(){if(this.attacker.fallingback&&this.defender.fallingback){return!1}else if(this.attacker.fallingback){return this.attacker.fallBackDistance-this.defender.persuitDistance>_battleSim.YARDS_TO_FIGHT}else if(this.defender.fallingback){return this.defender.fallBackDistance-this.attacker.persuitDistance>_battleSim.YARDS_TO_FIGHT}else{return!0}}get yardsOfSeparation(){return this.separation*_battleSim.YARDS_PER_INCH}get yardsOfSeparationAfter(){if(0<this.secondsToReachDefender){return 0}else{return this.separation+this.defender.backwardsSpeed*this.secondsAvailableAfterOrder-this.attacker.speed*this.secondsAvailableAfterOrder}}get inchesOfSeparationAfter(){return _Mathceil(this.yardsOfSeparationAfter/_battleSim.YARDS_PER_INCH)}get yardsDefenderFled(){if(this.defender.status===MORALE_FAILURE){const timeAvailableToFlee=this.secondsAvailableAfterOrder-.5*this.separation/this.attacker.speed;return timeAvailableToFlee*this.backwardsSpeed}else{return 0}}get inchesDefenderFled(){return _Mathceil(this.yardsDefenderFled/_battleSim.YARDS_PER_INCH)}get yardsAttackerTravelled(){if(this.melee){return this.attacker.speed*this.secondsToReachDefenderOrMax}else{return 0}}get inchesAttackerTravelled(){return _Mathfloor(this.yardsAttackerTravelled/_battleSim.YARDS_PER_INCH)}get secondsAvailableAfterOrder(){return _battleSim.SECONDS_PER_TURN-this.attacker.unit.secondsToIssueOrder}get secondsToReachDefender(){if(this.defender.status===MORALE_FAILURE){return this.yardsOfSeparation/(this.attacker.speed-this.defender.backwardsSpeed)}else{return this.yardsOfSeparation/this.attacker.speed}}get secondsToReachDefenderOrMax(){return _Mathmin(this.secondsToReachDefender,this.secondsAvailableAfterOrder)}get attackerReachedDefender(){return 0<this.secondsSpentFighting}get defenderFled(){return 0<this.yardsDefenderFled}get secondsSpentFighting(){if(this.melee){return this.secondsAvailableAfterOrder-this.secondsToReachDefender}else{return this.secondsAvailableAfterOrder}}get minutesSpentFighting(){return _Mathceil(this.secondsSpentFighting/_battleSim.SECONDS_IN_AN_MINUTE)}}_exports.$encounterDefault=Encounter;var encounter={default:Encounter};_exports.$encounter=encounter;class SoloUnit$1 extends SoloUnit{constructor({unit,situation,armyLeadership=0,status=MORALE_SUCCESS,slope=SLOPE_NONE}){super({unit,environment:situation,armyLeadership});this.unit=unit;this.situation=situation;this.armyLeadership=armyLeadership;this.status=status;this.slope=slope;this.energyModRoll=(0,_battleSim.weightedRandomTowards)(0,100,50,2);this.moraleModRoll=(0,_battleSim.weightedRandomTowards)(0,100,50,2)}get energyGain(){return _Mathmin(_battleSim.MAX_STAT-this.unit.energy,this.maxEnergyRecovered)}get moraleGain(){return _Mathmin(_battleSim.MAX_STAT-this.unit.morale,this.maxMoraleRecovered)}get maxMoraleRecovered(){return this.moraleModRoll*(this.situation.percentageOfATurnSpentResting/100)}get maxEnergyRecovered(){return this.energyModRoll*(this.situation.percentageOfATurnSpentResting/100)*((100-this.situation.percentageOfATurnSpentMoving)/100)}updates(delay){return{id:this.unit.id,changes:this.changes(delay)}}changes(delay){return[{prop:"energy",value:this.unit.energy+this.energyGain},{prop:"morale",value:this.unit.morale+this.moraleGain},{prop:"nextAction",value:this.unit.nextAction+delay}]}get desc(){return`${this.situation.yardsTravelled?this.moveDesc:""} ${this.situation.yardsTravelled?this.battlefieldMoveDesc:""} ${0<this.energyGain?this.energyRecoveredDesc:""}`}get battlefieldMoveDesc(){return`${this.unit.name} travelled ${(0,_battleSim.numberWithCommas)((0,_battleSim.nearest100)(this.situation.yardsTravelled))} yards in ${_Mathfloor(this.situation.secondsSpentMoving/_battleSim.SECONDS_IN_AN_MINUTE)} minutes.`}get moveDesc(){if(0===this.situation.distanceInYards){return`You move ${_Mathfloor(this.situation.yardsTravelled/_battleSim.YARDS_PER_INCH)} inches.`}else if(this.situation.yardsTravelled<this.situation.distanceInYards){return`You could only move ${_Mathfloor(this.situation.yardsTravelled/_battleSim.YARDS_PER_INCH)} inches.`}else{return`You move the full ${_Mathfloor(this.situation.yardsTravelled/_battleSim.YARDS_PER_INCH)} inches.`}}get energyRecoveredDesc(){if(80<this.energyGain){return`They got back all of there energy.`}else if(60<this.energyGain){return`They recovered almost all of their strength.`}else if(40<this.energyGain){return`They made a great recovery. The rest was very helpful.`}else if(20<this.energyGain){return`They recovered a lot of their strength`}else if(15<this.energyGain){return`They recovered much of their strength`}else if(9<this.energyGain){return`They recovered some of their strength`}else if(6<this.energyGain){return`They recovered a bit of their strength.`}else if(3<this.energyGain){return`The rest was worth it but they only recovered a little bit.`}else{return`The rest was hardly worth it.`}}}_exports.$soloUnitDefault=SoloUnit$1;var soloUnit={default:SoloUnit$1};_exports.$soloUnit=soloUnit;class Situation{constructor({unit,armyLeadership=0,terrain=0,slope=SLOPE_NONE$1}){this.terrain=terrain;this.slope=slope;this.soloUnit=new SoloUnit$1({unit:unit,situation:this,slope:this.slope})}rest(secondsSpent=_battleSim.SECONDS_PER_TURN){this.distance=0;this.secondsSpentMoving=0;this.secondsSpentResting=secondsSpent;return this.actionResult}move(distance){this.distance=-1===distance?Number.MAX_SAFE_INTEGER:distance;this.secondsSpentMoving=this.yardsTravelled/this.soloUnit.speed;this.secondsSpentResting=0;return this.actionResult}get actionResult(){return{messages:[this.soloUnit.desc],updates:[this.soloUnit.updates(_battleSim.SECONDS_PER_TURN)]}}get maxYardsTravelled(){return this.secondsAvailableToMove*this.soloUnit.speed}get secondsAvailableToMove(){return _battleSim.SECONDS_PER_TURN-this.soloUnit.unit.secondsToIssueOrder}get yardsTravelled(){return _Mathmin(this.distanceInYards,this.maxYardsTravelled)}get distanceInYards(){return this.distance*_battleSim.YARDS_PER_INCH}get totalSecondsSpent(){return this.secondsSpentMoving+this.secondsToIssueOrder}get percentageOfATurnSpentMoving(){return 100*(this.secondsSpentMoving/_battleSim.SECONDS_PER_TURN)}get percentageOfATurnSpentResting(){return 100*(this.secondsSpentResting/_battleSim.SECONDS_PER_TURN)}}_exports.$situationDefault=Situation;var situation={default:Situation};_exports.$situation=situation;const REST="REST",MOVE="MOVE",CHARGE="CHARGE",FIRE="FIRE";class FightView extends(0,_battleSim.connect)(_battleSim.store)(_battleSim.PageViewElement){static get properties(){return{_unit:{type:Object},_hasActiveBattle:{type:Boolean},_actionMessages:{type:Array},_date:{type:Object},_chargeMessage:{type:String}}}static get styles(){return[_battleSim.SharedStyles,_battleSim.ButtonSharedStyles,_battleSim.css`
        input.stands {
          width: calc(50% - 3px);
          box-sizing: border-box;
        }
        #unit {
          text-align: center;
          font-size: 2rem;
        }
        #army {
          text-align: center;
          color: var(--app-muted-text-color);
        }
        #time-of-day {
          text-align: center;
          color: var(--app-muted-text-color);
        }
        #action-result {
          display: none;
        }
        h6 {
          margin-bottom: 0;
        }
        #hill, #leader {
          width: calc(50% - 3px);
          box-sizing: border-box;
          display: inline-block;
        }
      `]}render(){return _battleSim.html`
      ${this._hasActiveBattle?_battleSim.html`
        <section>
          <div>
            <div id="unit">${this._unit.name}</div>
            <div id="army">Army: ${this._unit.army.name}</div>
            <div id="time-of-day">${(0,_battleSim.prettyDateTime)(this._date)}</div>
          </div>
          <h6>Unit Status</h6>
          <p>${this._unit.detailedStatus}</p>

          <h6>Unit Description</h6>
          <p>${this._unit.desc}</p>
        </section>
        <section>
          <div id="actions">
            <button @click="${this._rest}" id="rest">Rest</button>
            <button @click="${this._move}" id="move">Move</button>
            <button @click="${this._charge}" id="charge">Charge</button>
            <button @click="${this._fire}" id="fire">Fire</button>
          </div>
        </section>
        <section>
          <div id="input-container">
            <input id="distance" class="hidden" type="number" placeholder="Distance (Leave blank to move as far as possible)"></input>
            <input id="separation" class="hidden" type="number" placeholder="Distance (Required)"></input>
            <select id="target" class="hidden">
              <option value="">Select Target (Required)</option>
              ${(0,_battleSim.repeat)(this._unit.targets,target=>_battleSim.html`
                <option value="${target.id}">${target.unit.name}</option>
              `)}
            </select>
            <br>
            <br>
            <div id="hill" class="hidden">
              <radiogroup>
                <input type="radio" name="hill" id="${SLOPE_UP}" value="${SLOPE_UP}">
                <label for="${SLOPE_UP}">Uphill</label>
                <br>
                <input type="radio" name="hill" id="${SLOPE_DOWN}" value="${SLOPE_DOWN}">
                <label for="${SLOPE_DOWN}">Downhill</label>
                <br>
                <input type="radio" name="hill" id="${SLOPE_NONE$1}" value="${SLOPE_NONE$1}">
                <label for="${SLOPE_NONE$1}">Neither</label>
                <br><br>
              </radiogroup>
            </div>
            <div id="leader" class="hidden">
              <radiogroup>
                <input type="radio" name="leader" id="general" value="general">
                <label for="general">General</label>
                <br>
                <input type="radio" name="leader" id="subcommander" value="subcommander">
                <label for="subcommander">Subcommander</label>
                <br>
                <input type="radio" name="leader" id="neither" value="neither">
                <label for="neither">Neither</label>
                <br><br>
              </radiogroup>
            </div>
            <div id="terrain" class="hidden">
              <input type="checkbox" id="terrain-checkbox"></input>
              <label for="terrain-checkbox">Difficult Terrain</label>
            </div>
            <div id="resupply" class="hidden">
              <input type="checkbox" id="resupply-checkbox"></input>
              <label for="resupply-checkbox">Resupply</label>
            </div>
            <p id="charge-message" class="hidden">${this._chargeMessage}</p>
            <input id="engaged-attackers" class="hidden stands" type="number" placeholder="Attacking Stands"></input>
            <input id="engaged-defenders" class="hidden stands" type="number" placeholder="Defending Stands"></input>
          <div>
          <div id="do-combat" class="hidden">
            <button @click="${this._doCombat}">Do Combat</button>
          </div>
          <div id="take-action" class="hidden">
            <button @click="${this._takeAction}">Take Action</button>
          </div>
          <p class="error hidden">You must provide valid values for each required field.</p>
          <div id="action-result">
            ${(0,_battleSim.repeat)(this._actionMessages,message=>_battleSim.html`
              <p>${message}</p>
            `)}
            <p id="action-message"></p>
            <button @click="${this._progressToNextAction}">Next Action</button>
          </div>
        </section>
      `:_battleSim.html`
        <section>
          <p>No active battle. Go to the war tab and either select a battle or create a new battle.</p>
        </section>
      `}
    `}_progressToNextAction(){_battleSim.store.dispatch((0,_battleSim.takeAction)(this._actionUpdates));this._actionUpdate={};this.shadowRoot.getElementById("actions").style.display="block";this.shadowRoot.getElementById("take-action").style.display="block";this.shadowRoot.getElementById("action-result").style.display="none";this._actionMessageElement.innerText=""}_doCombat(){if(this.validSituation){this._hideInputs();let encounter=this._createEncounter();this._chargeMessage=encounter.chargeMessage;this.chargeMessageElement.classList.remove("hidden");if(encounter.attackerReachedDefender){this.engagedAttackingElement.classList.remove("hidden");this.engagedDefendingElement.classList.remove("hidden")}this.shadowRoot.getElementById("take-action").classList.remove("hidden")}else{this._showError()}}_takeAction(){if(this.validSituation){let actionResult,skipResults=!1;if(this._selectedAction===REST||this._selectedAction===MOVE){let sitation=this._createSituation();actionResult=this._selectedAction===REST?sitation.rest():sitation.move(this.distance)}else{let encounter=this._createEncounter();actionResult=encounter.fight();skipResults=this._selectedAction===CHARGE&&!encounter.attackerReachedDefender}this._actionMessages=actionResult.messages;this._actionUpdates=actionResult.updates;this._removeSelection();this.shadowRoot.getElementById("move").style.opacity=1;this.shadowRoot.getElementById("charge").style.opacity=1;this.shadowRoot.getElementById("rest").style.opacity=1;this.shadowRoot.getElementById("fire").style.opacity=1;this.distanceElement.value="";this.separationElement.value="";this.engagedAttackingElement.value="";this.engagedDefendingElement.value="";this.hillContainer.querySelectorAll("input").forEach(input=>input.checked=!1);this.leaderContainer.querySelectorAll("input").forEach(input=>input.checked=!1);this.terrainContainer.querySelector("input").checked=!1;this.resupplyContainer.querySelector("input").checked=!1;this.targetElement.value="";this.shadowRoot.getElementById("take-action").style.display="none";this.shadowRoot.getElementById("actions").style.display="none";if(skipResults){this._removeSelection();this._progressToNextAction()}else{this.shadowRoot.getElementById("action-result").style.display="block"}}else{this._showError()}}_createEncounter(){return new Encounter({attacker:this._unit,attackerTerrainDefense:0,attackerArmyLeadership:0,attackerEngagedStands:this.engagedAttackers,defender:new _battleSim.$unitDefault(this._activeBattle.units[this.target],this.target),defenderTerrainDefense:0,defenderArmyLeadership:0,defenderEngagedStands:this.engagedDefenders,melee:this._selectedAction===CHARGE,separation:this.separation,terrain:this.terrainModifier,slope:this.slope})}_createSituation(){return new Situation({unit:this._unit,armyLeadership:0,terrain:this.terrainModifier,slope:this.slope})}_showError(){this.errorElement.classList.remove("hidden");setTimeout(()=>{this.errorElement.classList.add("hidden")},3e3)}_removeSelection(){[...this.shadowRoot.querySelectorAll("button")].forEach(button=>button.classList.remove("selected"));this._hideInputs()}_hideInputs(){this.distanceElement.classList.add("hidden");this.separationElement.classList.add("hidden");this.engagedAttackingElement.classList.add("hidden");this.engagedDefendingElement.classList.add("hidden");this.hillContainer.classList.add("hidden");this.leaderContainer.classList.add("hidden");this.terrainContainer.classList.add("hidden");this.resupplyContainer.classList.add("hidden");this.targetElement.classList.add("hidden");this.chargeMessageElement.classList.add("hidden");this.shadowRoot.getElementById("do-combat").classList.add("hidden");this.shadowRoot.getElementById("take-action").classList.add("hidden")}_move(e){this._removeSelection();e.target.classList.add("selected");this.distanceElement.classList.remove("hidden");this.hillContainer.classList.remove("hidden");this.leaderContainer.classList.remove("hidden");this.terrainContainer.classList.remove("hidden");this.shadowRoot.getElementById("move").style.opacity=1;this.shadowRoot.getElementById("charge").style.opacity=.5;this.shadowRoot.getElementById("rest").style.opacity=.5;this.shadowRoot.getElementById("fire").style.opacity=.5;this.shadowRoot.getElementById("take-action").classList.remove("hidden");this._selectedAction=MOVE}_charge(e){this._removeSelection();e.target.classList.add("selected");this.separationElement.classList.remove("hidden");this.hillContainer.classList.remove("hidden");this.leaderContainer.classList.remove("hidden");this.terrainContainer.classList.remove("hidden");this.targetElement.classList.remove("hidden");this.shadowRoot.getElementById("move").style.opacity=.5;this.shadowRoot.getElementById("charge").style.opacity=1;this.shadowRoot.getElementById("rest").style.opacity=.5;this.shadowRoot.getElementById("fire").style.opacity=.5;this.shadowRoot.getElementById("do-combat").classList.remove("hidden");this._selectedAction=CHARGE}_rest(e){this._removeSelection();e.target.classList.add("selected");this.shadowRoot.getElementById("move").style.opacity=.5;this.shadowRoot.getElementById("charge").style.opacity=.5;this.shadowRoot.getElementById("rest").style.opacity=1;this.shadowRoot.getElementById("fire").style.opacity=.5;this.shadowRoot.getElementById("take-action").classList.remove("hidden");this.resupplyContainer.classList.remove("hidden");this._selectedAction=REST}_fire(e){this._removeSelection();e.target.classList.add("selected");this.separationElement.classList.remove("hidden");this.hillContainer.classList.remove("hidden");this.leaderContainer.classList.remove("hidden");this.terrainContainer.classList.remove("hidden");this.targetElement.classList.remove("hidden");this.engagedAttackingElement.classList.remove("hidden");this.engagedDefendingElement.classList.remove("hidden");this.shadowRoot.getElementById("move").style.opacity=.5;this.shadowRoot.getElementById("charge").style.opacity=.5;this.shadowRoot.getElementById("rest").style.opacity=.5;this.shadowRoot.getElementById("fire").style.opacity=1;this.shadowRoot.getElementById("take-action").classList.remove("hidden");this._selectedAction=FIRE}stateChanged(state){this._actionMessages=[];if(state.battle.battles.length>state.battle.activeBattle){this._activeBattle=state.battle.battles[state.battle.activeBattle];this._unit=new _battleSim.$unitDefault(this._activeBattle.units[this._activeBattle.activeUnit],this._activeBattle.activeUnit);this._date=new Date(this._activeBattle.startTime+1e3*this._activeBattle.second);this._hasActiveBattle=!0}else{this._hasActiveBattle=!1}}get distanceElement(){return this.shadowRoot.getElementById("distance")}get separationElement(){return this.shadowRoot.getElementById("separation")}get chargeMessageElement(){return this.shadowRoot.getElementById("charge-message")}get engagedAttackingElement(){return this.shadowRoot.getElementById("engaged-attackers")}get engagedDefendingElement(){return this.shadowRoot.getElementById("engaged-defenders")}get hillContainer(){return this.shadowRoot.getElementById("hill")}get leaderContainer(){return this.shadowRoot.getElementById("leader")}get terrainContainer(){return this.shadowRoot.getElementById("terrain")}get resupplyContainer(){return this.shadowRoot.getElementById("resupply")}get targetElement(){return this.shadowRoot.getElementById("target")}get errorElement(){return this.shadowRoot.querySelector(".error")}get distance(){return parseInt(""===this.distanceElement.value?-1:this.distanceElement.value)}get separation(){return parseInt(this.separationElement.value?this.separationElement.value:0)}get engagedAttackers(){return parseInt(""===this.engagedAttackingElement.value?0:this.engagedAttackingElement.value)}get engagedDefenders(){return parseInt(""===this.engagedDefendingElement.value?0:this.engagedDefendingElement.value)}get slope(){const radioVal=getRadioVal(this.shadowRoot.getElementById("input-container"),"hill");return radioVal?radioVal:SLOPE_NONE$1}get generalNearby(){return"general"===getRadioVal(this.shadowRoot.getElementById("input-container"),"leader")}get subcommanderNearby(){return"subcommander"===getRadioVal(this.shadowRoot.getElementById("input-container"),"leader")}get terrain(){return this.terrainContainer.querySelector("input").checked}get resupply(){return this.resupplyContainer.querySelector("input").checked}get target(){return parseInt(this.targetElement.value)}get terrainModifier(){if(this.uphill&&this.terrain){return 60}else if(this.uphill){return 40}else if(this.terrain){return 20}else{return 0}}get validSituation(){if(this._selectedAction===REST){return!0}else if(this._selectedAction===MOVE){return!0}else if(this._selectedAction===CHARGE){return!isNaN(this.target)}else if(this._selectedAction===FIRE){return!isNaN(this.target)}else{return!1}}get _actionMessageElement(){return this.shadowRoot.getElementById("action-message")}}window.customElements.define("fight-view",FightView)});