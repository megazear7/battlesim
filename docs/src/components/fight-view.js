define(["exports","./battle-sim.js"],function(_exports,_battleSim){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.getRadioVal=getRadioVal;_exports.$soloUnitDefault=_exports.$situationDefault=_exports.$encounterDefault=_exports.$combatantDefault=_exports.$soloUnit=_exports.$situation=_exports.$encounter=_exports.$domUtils=_exports.$combatant=void 0;var _Mathfloor=Math.floor,_Mathceil=Math.ceil,_Mathmin=Math.min;class Combatant extends _battleSim.$actingUnitDefault{constructor({unit,encounter,target,armyLeadership=0,terrainDefense=0,engagedStands=-1,slope=_battleSim.SLOPE_NONE}){super({unit,environment:encounter,armyLeadership});this.unit=unit;this.encounter=encounter;this.target=target;this.armyLeadership=armyLeadership;this.terrainDefense=terrainDefense;this.engagedStands=-1>=engagedStands||engagedStands>unit.stands?unit.stands:engagedStands;this.slope=slope;this.casualties=0;this.ammunitionUsed=0;this.yardsFallenback=0;this.yardsPersued=0;this.leaderSurviveRoll=Math.random();this.energyModRoll=(0,_battleSim.randomBellMod)();this.moraleModRoll=(0,_battleSim.randomBellMod)()}get energyLoss(){return 50*(0,_battleSim.weightedAverage)({value:this.encounter.melee?.2:.1,weight:2},this.encounter.secondsSpentFighting/_battleSim.SECONDS_PER_TURN,this.energyModRoll,this.unit.carriedWeight/_battleSim.MAX_EQUIPMENT_WEIGHT)}get moraleLoss(){return 50*(0,_battleSim.weightedAverage)(this.moraleModRoll,this.hardinessMod,this.casualties/this.unit.strength,this.unit.strength/this.unit.fullStrength)}get attacksRequireAmmunition(){return!this.encounter.melee}get fallingback(){return this.casualties>this.fallbackCasualtyCount}get persueing(){return!this.fallingback&&0<this.yardsPersued}get fallbackCasualtyCount(){return this.unit.strength*(this.unit.fallback/100)}get leadershipLoss(){return this.casualties/this.unit.strength>this.leaderSurviveRoll?_Mathmin(30,this.unit.leadership):0}get hardinessMod(){return(_battleSim.MAX_STAT-this.unit.experience)/_battleSim.MAX_STAT}get inchesPersued(){return _Mathceil(this.yardsPersued/_battleSim.YARDS_PER_INCH)}get inchesFallenback(){return _Mathceil(this.yardsFallenback/_battleSim.YARDS_PER_INCH)}get modifiedMeleeVolume(){return this.unit.meleeWeapon.volume}get modifiedRangedVolume(){return(0,_battleSim.modVolume)(this.unit.rangedWeapon.volume,this.unit.rangedWeapon.range,this.encounter.yardsOfSeparation)}get volume(){return this.encounter.melee?this.modifiedMeleeVolume:this.modifiedRangedVolume}get modifiedVolume(){return this.volume*this.volumeModifier}get volumeModifier(){return(0,_battleSim.statModFor)(this.unit.energy)*this.engagedMod*this.terrainMod}get targetTroopType(){return this.target.unitType===_battleSim.FOOT_TROOP?_battleSim.POWER_VS_FOOT:_battleSim.POWER_VS_MOUNTED}get weaponTypeForEncounter(){return this.encounter.melee?_battleSim.MELEE_WEAPON:_battleSim.RANGED_WEAPON}get power(){return this.unit[this.weaponTypeForEncounter][this.targetTroopType]}get modifiedPower(){return this.power*this.powerModifier}get skill(){return this.encounter.melee?this.unit.meleeSkill:this.unit.rangedSkill}get engagedMod(){return _Mathmin(this.engagedStands,this.unit.stands)/this.unit.stands}get powerModifier(){return this.slopeMod}get skillRoll(){return Math.random()*this.skill*(0,_battleSim.statModFor)(this.unit.energy)}get powerRoll(){return Math.random()*this.modifiedPower}get armorRoll(){return Math.random()*this.armor}get secondsPerAttack(){return this.unit.strength*this.modifiedVolume/_battleSim.SECONDS_IN_AN_HOUR}attacksForTime(duration){return this.unit.strength*this.engagedMod*this.modifiedVolume*(duration/_battleSim.SECONDS_IN_AN_HOUR)}battleReport(){if(0>=this.unit.strength-this.casualties){return`${this.unit.name} was destroyed.`}else if(0>=this.unit.morale-this.moraleLoss){return`${this.unit.name} fled the battlefield.`}else{return`${this.casualtyMessage} ${this.leadershipMessage}`}}exactBattleReport(){return`${this.unit.name} -- ${this.status} -- Casualties: ${this.casualties} -- Energy Loss: ${this.energyLoss} -- Morale Loss: ${this.moraleLoss} -- Leadership Loss: ${this.leadershipLoss}`}updates(delay){return{id:this.unit.id,changes:this.changes(delay)}}changes(delay){return[{prop:"strength",value:this.unit.strength-this.casualties},{prop:"energy",value:this.unit.energy-this.energyLoss},{prop:"morale",value:this.unit.morale-this.moraleLoss},{prop:"leadership",value:this.unit.leadership-this.leadershipLoss},{prop:"nextAction",value:this.unit.nextAction+delay}]}get casualtyMessage(){if(this.casualties>this.unit.strength){return`${this.unit.name} was totally destroyed.`}else if(this.casualties>.75*this.unit.strength){return`${this.unit.name} sustained terrible casualties. Almost the whole unit was destroyed.`}else if(this.casualties>.5*this.unit.strength){return`${this.unit.name} sustained terrible casualties. Over half the unit is destroyed.`}else if(this.casualties>.3*this.unit.strength){return`${this.unit.name} sustained terrible casualties.`}else if(this.casualties>.2*this.unit.strength){return`${this.unit.name} sustained grave casualties.`}else if(this.casualties>.15*this.unit.strength){return`${this.unit.name} sustained massive casualties.`}else if(this.casualties>.1*this.unit.strength){return`${this.unit.name} sustained major casualties.`}else if(this.casualties>.5*this.unit.strength){return`${this.unit.name} sustained significant casualties.`}else if(this.casualties>.03*this.unit.strength){return`${this.unit.name} sustained noticable casualties.`}else if(this.casualties>.02*this.unit.strength){return`${this.unit.name} sustained minor casualties.`}else if(0<this.casualties){return`${this.unit.name} sustained almost no casualties.`}else{return this.encounter.melee?`${this.unit.name} sustained no casualties.`:``}}get leadershipMessage(){if(this.leadershipLoss>this.unit.leadership){return`${this.unit.name} lost all of their leaders during the fight. They have no one to command them.`}else if(this.leadershipLoss>.5*this.unit.leadership){return`${this.unit.name} lost their captain during the fight.`}else if(this.leadershipLoss>.25*this.unit.leadership){return`${this.unit.name} lost a lieutenant during the fight.`}else if(0<this.leadershipLoss){return`${this.unit.name} lost some of their sergeant's during the fight.`}else{return``}}}_exports.$combatantDefault=Combatant;var combatant={default:Combatant};_exports.$combatant=combatant;function getRadioVal(container,name){for(var val,radios=container.querySelectorAll(`[name="${name}"]`),i=0,len=radios.length;i<len;i++){if(radios[i].checked){val=radios[i].value;break}}return val}var domUtils={getRadioVal:getRadioVal};_exports.$domUtils=domUtils;class Encounter{constructor({attacker,attackerTerrainDefense=0,attackerArmyLeadership=0,attackerEngagedStands=-1,defender,defenderTerrainDefense=0,defenderArmyLeadership=0,defenderEngagedStands=-1,melee=!0,separation=0,terrain=0,slope=_battleSim.SLOPE_NONE}){this.melee=melee;this.separation=separation;this.terrain=terrain;this.slope=slope;this.attacker=new Combatant({unit:attacker,encounter:this,target:defender,engagedStands:attackerEngagedStands,terrainDefense:attackerTerrainDefense,armyLeadership:attackerArmyLeadership,slope:this.attackerSlope});this.defender=new Combatant({unit:defender,encounter:this,target:attacker,engagedStands:defenderEngagedStands,terrainDefense:defenderTerrainDefense,armyLeadership:defenderArmyLeadership,slope:this.defenderSlope})}inchesWord(number){return 1===number?"inch":"inches"}attackerEngages(){let secondsOfCombat=(0,_battleSim.combat)(this.attacker,this.defender,_battleSim.SECONDS_PER_TURN),actionMessage=``;if(this.attacker.fallingback&&1<=this.attacker.inchesFallenback){actionMessage+=`${this.attacker.unit.name} fell back ${this.attacker.inchesFallenback} ${this.inchesWord(this.attacker.inchesFallenback)}. `;if(this.defender.persueing&&2<=this.defender.inchesPersued){actionMessage+=`${this.defender.unit.name} persued ${this.defender.inchesPersued} ${this.inchesWord(this.defender.inchesPersued)}. `}}if(this.defender.fallingback&&1<=this.defender.inchesFallenback){actionMessage+=`${this.defender.unit.name} fell back ${this.defender.inchesFallenback} ${this.inchesWord(this.defender.inchesFallenback)}.`;if(this.attacker.persueing&&2<=this.attacker.inchesPersued){actionMessage+=`${this.attacker.unit.name} persued ${this.attacker.inchesPersued} ${this.inchesWord(this.attacker.inchesPersued)}.`}}if(1<this.inchesDefenderFled){return`${actionMessage} ${attackerMessage} ${this.defender.unit.name} fled ${this.inchesDefenderFled} inches but was then caught by ${this.attacker.unit.name}. ${this.timeEngagedMessage(secondsOfCombat)}`}else if(this.defenderFled){return`${actionMessage} ${this.defender.unit.name} attempted to fall back but was quickly caught by ${this.attacker.unit.name}. ${this.timeEngagedMessage(secondsOfCombat)}`}else{return`${actionMessage} ${this.timeEngagedMessage(secondsOfCombat)}`}}get couldNotReachTargetMessage(){if(this.defenderFled){return`${this.defender.unit.name} fled ${this.inchesDefenderFled} inches and ${this.attacker.unit.name} could not reach it's target but may persue up to ${this.inchesOfSeparationAfter} inches.`}else if(this.attacker.status===_battleSim.MORALE_FAILURE){return`${this.attacker.unit.name} refused to make the attack.`}else{return`${this.attacker.unit.name} could not reach ${this.defender.unit.name} but moved ${this.inchesAttackerTravelled} inches towards it's target.`}}get chargeMovementMessage(){return`${this.attacker.unit.name} may move his stands ${this.attackerMovementInches} inches in order to make it into combat. Then the defender may follow this by moving his unengaged stands ${this.defenderMovementInches} inches.`}get attackerMovementInches(){return _Mathceil((this.attacker.yardsMovedPer(this.graceWindow)+this.yardsAttackerTravelled)/_battleSim.YARDS_PER_INCH)}get defenderMovementInches(){return _Mathceil(this.defender.yardsMovedPer(this.graceWindow)/_battleSim.YARDS_PER_INCH)}get chargeMessage(){return this.attackerReachedDefender?this.chargeMovementMessage:this.couldNotReachTargetMessage}get graceWindow(){return .5*this.secondsSpentFighting}fight(){const actionMessage=this.attackerReachedDefender?this.attackerEngages():``,fullMessage=`${actionMessage} ${this.defender.battleReport()} ${this.attacker.battleReport()}`;return{messages:[fullMessage],updates:[this.defender.updates(0),this.attacker.updates(_battleSim.SECONDS_PER_TURN+(0,_battleSim.randomMinutesBetween)(5,10))]}}timeEngagedMessage(seconds){return`They were engaged for ${seconds/_battleSim.SECONDS_IN_AN_MINUTE} minutes.`}get attackerSlope(){return this.slope}get defenderSlope(){if(this.slope===_battleSim.SLOPE_UP){return _battleSim.SLOPE_DOWN}else if(this.slope===_battleSim.SLOPE_DOWN){return _battleSim.SLOPE_UP}else{return _battleSim.SLOPE_NONE}}get closeEnoughToFight(){if(this.attacker.fallingback&&this.defender.fallingback){return!1}else if(this.attacker.fallingback){return this.attacker.fallBackDistance-this.defender.persuitDistance>_battleSim.YARDS_TO_FIGHT}else if(this.defender.fallingback){return this.defender.fallBackDistance-this.attacker.persuitDistance>_battleSim.YARDS_TO_FIGHT}else{return!0}}get yardsOfSeparation(){return this.separation*_battleSim.YARDS_PER_INCH}get yardsOfSeparationAfter(){if(0<this.secondsToReachDefender){return 0}else{return this.separation+this.defender.backwardsSpeed*this.secondsAvailableAfterOrder-this.attacker.speed*this.secondsAvailableAfterOrder}}get inchesOfSeparationAfter(){return _Mathceil(this.yardsOfSeparationAfter/_battleSim.YARDS_PER_INCH)}get yardsDefenderFled(){if(this.defender.status===_battleSim.MORALE_FAILURE){const timeAvailableToFlee=this.secondsAvailableAfterOrder-.5*this.separation/this.attacker.speed;return timeAvailableToFlee*this.backwardsSpeed}else{return 0}}get inchesDefenderFled(){return _Mathceil(this.yardsDefenderFled/_battleSim.YARDS_PER_INCH)}get yardsAttackerTravelled(){if(this.melee){return this.attacker.speed*this.secondsToReachDefenderOrMax}else{return 0}}get inchesAttackerTravelled(){return _Mathfloor(this.yardsAttackerTravelled/_battleSim.YARDS_PER_INCH)}get secondsAvailableAfterOrder(){return _battleSim.SECONDS_PER_TURN-this.attacker.unit.secondsToIssueOrder}get secondsToReachDefender(){if(this.defender.status===_battleSim.MORALE_FAILURE){return this.yardsOfSeparation/(this.attacker.speed-this.defender.backwardsSpeed)}else{return this.yardsOfSeparation/this.attacker.speed}}get secondsToReachDefenderOrMax(){return _Mathmin(this.secondsToReachDefender,this.secondsAvailableAfterOrder)}get attackerReachedDefender(){return 0<this.secondsSpentFighting}get defenderFled(){return 0<this.yardsDefenderFled}get secondsSpentFighting(){if(this.attacker.status===_battleSim.MORALE_SUCCESS){if(this.melee){return this.secondsAvailableAfterOrder-this.secondsToReachDefender}else{return this.secondsAvailableAfterOrder}}else{return 0}}get minutesSpentFighting(){return _Mathceil(this.secondsSpentFighting/_battleSim.SECONDS_IN_AN_MINUTE)}}_exports.$encounterDefault=Encounter;var encounter={default:Encounter};_exports.$encounter=encounter;class SoloUnit extends _battleSim.$actingUnitDefault{constructor({unit,situation,armyLeadership=0,status=_battleSim.MORALE_SUCCESS,slope=SLOPE_NONE}){super({unit,environment:situation,armyLeadership});this.unit=unit;this.situation=situation;this.armyLeadership=armyLeadership;this.status=status;this.slope=slope;this.energyModRoll=(0,_battleSim.weightedRandomTowards)(0,100,30,2);this.moraleModRoll=(0,_battleSim.weightedRandomTowards)(0,100,1,2)}get energyGain(){if(0<this.situation.minutesSpentResting){return _Mathmin(_battleSim.MAX_STAT-this.unit.energy,this.maxEnergyRecovered)}else{return 0}}get moraleGain(){if(0<this.situation.minutesSpentResting){return _Mathmin(_battleSim.MAX_STAT-this.unit.morale,this.maxMoraleRecovered)}else{return 0}}get maxMoraleRecovered(){return(0,_battleSim.weightedAverage)({value:this.moraleModRoll,weight:2},this.situation.percentageOfATurnSpentResting/4)}get maxEnergyRecovered(){return(0,_battleSim.weightedAverage)(this.energyModRoll,this.situation.percentageOfATurnSpentResting,100-this.situation.percentageOfATurnSpentMoving)}updates(delay){return{id:this.unit.id,changes:this.changes(delay)}}changes(delay){return[{prop:"energy",value:this.unit.energy+this.energyGain},{prop:"morale",value:this.unit.morale+this.moraleGain},{prop:"nextAction",value:this.unit.nextAction+delay}]}get desc(){return`${0<this.situation.yardsTravelled?this.moveDesc:""} ${0<this.situation.yardsTravelled?this.battlefieldMoveDesc:""} ${0<this.energyGain&&0<this.situation.minutesSpentResting?this.energyRecoveredDesc:""} ${0<this.moraleGain&&0<this.situation.minutesSpentResting?this.moraleRecoveredDesc:""}`}get battlefieldMoveDesc(){return`in ${_Mathfloor(this.situation.secondsSpentMoving/_battleSim.SECONDS_IN_AN_MINUTE)} minutes.`}get moveDesc(){if(-1===this.situation.distance){return`You move ${_Mathfloor(this.situation.yardsTravelled/_battleSim.YARDS_PER_INCH)} inches `}else if(this.situation.yardsTravelled<this.situation.distanceInYards){return`You could only move ${_Mathfloor(this.situation.yardsTravelled/_battleSim.YARDS_PER_INCH)} inches `}else{return`You move the full ${_Mathfloor(this.situation.yardsTravelled/_battleSim.YARDS_PER_INCH)} inches `}}get energyRecoveredDesc(){if(80<this.energyGain){return`In ${this.situation.minutesSpentResting} minutes they got back all of there energy.`}else if(60<this.energyGain){return`In ${this.situation.minutesSpentResting} minutes they recovered almost all of their strength.`}else if(40<this.energyGain){return`In ${this.situation.minutesSpentResting} minutes they made a great recovery. The rest was very helpful.`}else if(20<this.energyGain){return`In ${this.situation.minutesSpentResting} minutes they recovered a lot of their strength`}else if(15<this.energyGain){return`In ${this.situation.minutesSpentResting} minutes they recovered much of their strength`}else if(9<this.energyGain){return`In ${this.situation.minutesSpentResting} minutes they recovered some of their strength`}else if(6<this.energyGain){return`In ${this.situation.minutesSpentResting} minutes they recovered a bit of their strength.`}else if(3<this.energyGain){return`In ${this.situation.minutesSpentResting} minutes they recovered a bit of their strength.`}else{return`The rest was hardly worth it.`}}get moraleRecoveredDesc(){if(20<this.moraleGain){return`They have been greatly encouraged.`}else if(10<this.moraleGain){return`They have been encouraged.`}else{return`They seem to be more willing to fight than before.`}}}_exports.$soloUnitDefault=SoloUnit;var soloUnit={default:SoloUnit};_exports.$soloUnit=soloUnit;class Situation{constructor({unit,armyLeadership=0,terrain=0,slope=_battleSim.SLOPE_NONE}){this.terrain=terrain;this.slope=slope;this.soloUnit=new SoloUnit({unit:unit,situation:this,slope:this.slope})}rest(minutesSpent=_battleSim.MINUTES_PER_TURN){this.distance=0;this.secondsSpentMoving=0;this.secondsSpentResting=minutesSpent*_battleSim.SECONDS_IN_AN_MINUTE;return this.actionResult}move(distance){this.distance=distance;this.secondsSpentMoving=this.yardsTravelled/this.soloUnit.speed;this.secondsSpentResting=0;return this.actionResult}get actionResult(){return{messages:[this.soloUnit.desc],updates:[this.soloUnit.updates(_battleSim.SECONDS_PER_TURN)]}}get maxYardsTravelled(){return this.secondsAvailableToMove*this.soloUnit.speed}get secondsAvailableToMove(){return _battleSim.SECONDS_PER_TURN-this.soloUnit.unit.secondsToIssueOrder}get yardsTravelled(){if(-1===this.distance){return this.maxYardsTravelled}else{return _Mathmin(this.distanceInYards,this.maxYardsTravelled)}}get distanceInYards(){return this.distance*_battleSim.YARDS_PER_INCH}get totalSecondsSpent(){return this.secondsSpentMoving+this.secondsToIssueOrder}get percentageOfATurnSpentMoving(){return 100*(this.secondsSpentMoving/_battleSim.SECONDS_PER_TURN)}get percentageOfATurnSpentResting(){return 100*(this.secondsSpentResting/_battleSim.SECONDS_PER_TURN)}get minutesSpentResting(){return this.secondsSpentResting/_battleSim.SECONDS_IN_AN_MINUTE}}_exports.$situationDefault=Situation;var situation={default:Situation};_exports.$situation=situation;const REST="REST",MOVE="MOVE",CHARGE="CHARGE",FIRE="FIRE",ACTIONS=[REST,MOVE,CHARGE,FIRE],NO_ACTION="NO_ACTION";class FightView extends(0,_battleSim.connect)(_battleSim.store)(_battleSim.PageViewElement){static get properties(){return{_unit:{type:Object},_hasActiveBattle:{type:Boolean},_actionMessages:{type:Array},_date:{type:Object},_chargeMessage:{type:String},_showDistance:{type:Boolean},_showRestTime:{type:Boolean},_showSeparation:{type:Boolean},_showTarget:{type:Boolean},_showHill:{type:Boolean},_showLeader:{type:Boolean},_showTerrain:{type:Boolean},_showResupply:{type:Boolean},_showChargeMessage:{type:Boolean},_showEngagedAttackers:{type:Boolean},_showDoCombat:{type:Boolean},_showTakeAction:{type:Boolean},_showError:{type:Boolean},_showActionResult:{type:Boolean},_actionsDisabled:{type:Boolean}}}static get styles(){return[_battleSim.SharedStyles,_battleSim.ButtonSharedStyles,_battleSim.css`
        input.stands {
          width: calc(50% - 3px);
          box-sizing: border-box;
        }
        #hill, #leader {
          width: calc(50% - 3px);
          box-sizing: border-box;
          display: inline-block;
        }
        .full {
          width: 100% !important;
        }
        .has-selection button {
          opacity: 0.5;
        }
        button.selected {
          opacity: 1;
        }
      `]}render(){return _battleSim.html`
      ${this._hasActiveBattle?_battleSim.html`
        <section>
          <h2>${this._unit.name}</h2>
          <div class="muted centered">Army: ${this._unit.army.name}</div>
          <div class="muted centered">${(0,_battleSim.prettyDateTime)(this._date)}</div>
          <p>${this._unit.detailedStatus}</p>
          <hr>
          <p>${this._unit.desc}</p>
        </section>
        <section>
          <div class="${(0,_battleSim.classMap)({"has-selection":this._actionSelected})}">
            <button @click="${this._rest}" id="rest" ?disabled="${this._actionsDisabled}" class="${(0,_battleSim.classMap)({selected:this._selectedAction===REST})}">Rest</button>
            <button @click="${this._move}" id="move" ?disabled="${this._actionsDisabled}" class="${(0,_battleSim.classMap)({selected:this._selectedAction===MOVE})}">Move</button>
            <button @click="${this._charge}" id="charge" ?disabled="${this._actionsDisabled}" class="${(0,_battleSim.classMap)({selected:this._selectedAction===CHARGE})}">Charge</button>
            <button @click="${this._fire}" id="fire" ?disabled="${this._actionsDisabled}" class="${(0,_battleSim.classMap)({selected:this._selectedAction===FIRE})}">Fire</button>
          </div>
        </section>
        <section>
          <div>
            <input id="rest-time" class="${(0,_battleSim.classMap)({hidden:!this._showRestTime})}" type="number" placeholder="Minutes to rest" max="${_battleSim.MINUTES_PER_TURN}"></input>
            <input id="distance" class="${(0,_battleSim.classMap)({hidden:!this._showDistance})}" type="number" placeholder="Distance (Leave blank to move as far as possible)"></input>
            <input id="separation" class="${(0,_battleSim.classMap)({hidden:!this._showSeparation})}" type="number" placeholder="Distance (Required)"></input>
            <select id="target" class="${(0,_battleSim.classMap)({hidden:!this._showTarget})}">
              <option value="">Select Target (Required)</option>
              ${(0,_battleSim.repeat)(this._unit.targets,target=>_battleSim.html`
                <option value="${target.id}">${target.unit.name}</option>
              `)}
            </select>
            <radiogroup id="hill" class="${(0,_battleSim.classMap)({hidden:!this._showHill})}">
              <input type="radio" name="hill" id="${_battleSim.SLOPE_UP}" value="${_battleSim.SLOPE_UP}">
              <label for="${_battleSim.SLOPE_UP}">Uphill</label>
              <br>
              <input type="radio" name="hill" id="${_battleSim.SLOPE_DOWN}" value="${_battleSim.SLOPE_DOWN}">
              <label for="${_battleSim.SLOPE_DOWN}">Downhill</label>
              <br>
              <input type="radio" name="hill" id="${_battleSim.SLOPE_NONE}" value="${_battleSim.SLOPE_NONE}">
              <label for="${_battleSim.SLOPE_NONE}">Neither</label>
              <br><br>
            </radiogroup>
            <radiogroup id="leader" class="${(0,_battleSim.classMap)({hidden:!this._showLeader})}">
              <input type="radio" name="leader" id="general" value="general">
              <label for="general">General</label>
              <br>
              <input type="radio" name="leader" id="subcommander" value="subcommander">
              <label for="subcommander">Subcommander</label>
              <br>
              <input type="radio" name="leader" id="neither" value="neither">
              <label for="neither">Neither</label>
              <br><br>
            </radiogroup>
            <div id="terrain" class="${(0,_battleSim.classMap)({hidden:!this._showTerrain})}">
              <input type="checkbox" id="terrain-checkbox"></input>
              <label for="terrain-checkbox">Difficult Terrain</label>
            </div>
            <div id="resupply" class="${(0,_battleSim.classMap)({hidden:!this._showResupply})}">
              <input type="checkbox" id="resupply-checkbox"></input>
              <label for="resupply-checkbox">Resupply</label>
            </div>
            <p class="${(0,_battleSim.classMap)({hidden:!this._showChargeMessage})}">${this._chargeMessage}</p>
            <input id="engaged-attackers" class="${(0,_battleSim.classMap)({hidden:!this._showEngagedAttackers,full:this._showEngagedAttackers&&!this._showEngagedDefenders,stands:!0})}" type="number" placeholder="Attacking Stands"></input>
            <input id="engaged-defenders" class="${(0,_battleSim.classMap)({hidden:!this._showEngagedDefenders,stands:!0})}" type="number" placeholder="Defending Stands"></input>
            <button class="${(0,_battleSim.classMap)({hidden:!this._showDoCombat})}" @click="${this._doCombat}">Do Combat</button>
            <button class="${(0,_battleSim.classMap)({hidden:!this._showTakeAction})}" @click="${this._takeAction}">Take Action</button>
            <p class="${(0,_battleSim.classMap)({hidden:!this._showError,error:!0})}">You must provide valid values for each required field.</p>
            <div class="${(0,_battleSim.classMap)({hidden:!this._showActionResult})}">
              ${(0,_battleSim.repeat)(this._actionMessages,message=>_battleSim.html`<p>${message}</p>`)}
              <button @click="${this._progressToNextAction}">Next Action</button>
            </div>
          <div>
        </section>
      `:_battleSim.html`
        <section>
          <p>No active battle. Go to the war tab and either select a battle or create a new battle.</p>
        </section>
      `}
    `}stateChanged(state){this._actionMessages=[];if(state.battle.battles.length>state.battle.activeBattle){this._activeBattle=state.battle.battles[state.battle.activeBattle];this._unit=new _battleSim.$unitDefault(this._activeBattle.units[this._activeBattle.activeUnit],this._activeBattle.activeUnit);this._date=new Date(this._activeBattle.startTime+1e3*this._activeBattle.second);this._hasActiveBattle=!0}else{this._hasActiveBattle=!1}}_doCombat(){if(this._validSituation){this._hideInputs();const encounter=this._createEncounter();this._chargeMessage=encounter.chargeMessage;this._showEngagedAttackers=encounter.attackerReachedDefender;this._showEngagedDefenders=encounter.attackerReachedDefender;this._actionsDisabled=!0;this._showTakeAction=!0;this._showChargeMessage=!0}else{this._blinkError()}}_takeAction(){if(this._validSituation){let actionResult,skipResults;if(this._selectedAction===REST||this._selectedAction===MOVE){const situation=this._createSituation();actionResult=this._selectedAction===REST?situation.rest(this.restTime):situation.move(this.distance);skipResults=!1}else{let encounter=this._createEncounter();actionResult=encounter.fight();skipResults=this._selectedAction===CHARGE&&!encounter.attackerReachedDefender}this._actionMessages=actionResult.messages;this._actionUpdates=actionResult.updates;this._hideInputs();this._resetInputs();this._selectedAction=NO_ACTION;this._actionsDisabled=!0;this._showTakeAction=!1;if(skipResults){this._progressToNextAction()}else{this._showActionResult=!0}}else{this._blinkError()}}_progressToNextAction(){_battleSim.store.dispatch((0,_battleSim.takeAction)(this._actionUpdates));this._actionUpdate={};this._showActionResult=!1;this._actionsDisabled=!1}_rest(e){this._hideInputs();this._selectedAction=REST;this._showTakeAction=!0;this._showRestTime=!0;this._showResupply=!0}_move(e){this._hideInputs();this._selectedAction=MOVE;this._showDistance=!0;this._showHill=!0;this._showLeader=!0;this._showTerrain=!0;this._showTakeAction=!0}_charge(e){this._hideInputs();this._selectedAction=CHARGE;this._showSeparation=!0;this._showHill=!0;this._showLeader=!0;this._showTerrain=!0;this._showTarget=!0;this._showDoCombat=!0}_fire(e){this._hideInputs();this._selectedAction=FIRE;this._showSeparation=!0;this._showHill=!0;this._showLeader=!0;this._showTerrain=!0;this._showTarget=!0;this._showEngagedAttackers=!0;this._showTakeAction=!0}_createEncounter(){return new Encounter({attacker:this._unit,attackerTerrainDefense:0,attackerArmyLeadership:0,attackerEngagedStands:this.engagedAttackers,defender:new _battleSim.$unitDefault(this._activeBattle.units[this.target],this.target),defenderTerrainDefense:0,defenderArmyLeadership:0,defenderEngagedStands:this.engagedDefenders,melee:this._selectedAction===CHARGE,separation:this.separation,terrain:this._terrainModifier,slope:this.slope})}_createSituation(){return new Situation({unit:this._unit,armyLeadership:0,terrain:this._terrainModifier,slope:this.slope})}_hideInputs(){this._showDistance=!1;this._showRestTime=!1;this._showSeparation=!1;this._showEngagedAttackers=!1;this._showEngagedDefenders=!1;this._showHill=!1;this._showLeader=!1;this._showTerrain=!1;this._showResupply=!1;this._showTarget=!1;this._showChargeMessage=!1;this._showDoCombat=!1;this._showTakeAction=!1}_resetInputs(){this.get("distance").value="";this.get("rest-time").value="";this.get("separation").value="";this.get("engaged-attackers").value="";this.get("engaged-defenders").value="";this.get("hill").querySelectorAll("input").forEach(input=>input.checked=!1);this.get("leader").querySelectorAll("input").forEach(input=>input.checked=!1);this.get("terrain").querySelector("input").checked=!1;this.get("resupply").querySelector("input").checked=!1;this.get("target").value=""}_blinkError(){this._showError=!0;setTimeout(()=>{this._showError=!1},3e3)}get _actionSelected(){return 0<=ACTIONS.indexOf(this._selectedAction)}get _terrainModifier(){if(this.uphill&&this.terrain){return 60}else if(this.uphill){return 40}else if(this.terrain){return 20}else{return 0}}get _validSituation(){if(this._selectedAction===REST){return!0}else if(this._selectedAction===MOVE){return!0}else if(this._selectedAction===CHARGE){return!isNaN(this.target)}else if(this._selectedAction===FIRE){return!isNaN(this.target)}else{return!1}}get distance(){return parseInt(""===this.get("distance").value?-1:this.get("distance").value)}get restTime(){return _Mathmin(parseInt(""===this.get("rest-time").value?_battleSim.MINUTES_PER_TURN:this.get("rest-time").value),_battleSim.MINUTES_PER_TURN)}get separation(){return parseInt(this.get("separation").value?this.get("separation").value:0)}get engagedAttackers(){return parseInt(""===this.get("engaged-attackers").value?-1:this.get("engaged-attackers").value)}get engagedDefenders(){if(this._selectedAction===CHARGE){return parseInt(""===this.get("engaged-defenders").value?-1:this.get("engaged-defenders").value)}else{return 0}}get slope(){const radioVal=getRadioVal(this.get("hill"),"hill");return radioVal?radioVal:_battleSim.SLOPE_NONE}get generalNearby(){return"general"===getRadioVal(this.get("leader"),"leader")}get subcommanderNearby(){return"subcommander"===getRadioVal(this.get("leader"),"leader")}get terrain(){return this.get("terrain").querySelector("input").checked}get resupply(){return this.get("resupply").querySelector("input").checked}get target(){return parseInt(this.get("target").value)}get(id){return this.shadowRoot.getElementById(id)}}window.customElements.define("fight-view",FightView)});