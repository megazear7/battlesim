define(["exports","./battle-sim.js"],function(_exports,_battleSim){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.getRadioVal=getRadioVal;_exports.MAX_TERRAIN=_exports.SLOPE_NONE=_exports.SLOPE_DOWN=_exports.SLOPE_UP=_exports.$encounterDefault=_exports.$combatantDefault=_exports.MORALE_FAILURE=_exports.MORALE_SUCCESS=_exports.$terrain=_exports.$encounter=_exports.$domUtils=_exports.$combatant=void 0;var _Mathceil=Math.ceil,_Mathmin=Math.min;const SLOPE_UP="SLOPE_UP";_exports.SLOPE_UP=SLOPE_UP;const SLOPE_DOWN="SLOPE_DOWN";_exports.SLOPE_DOWN=SLOPE_DOWN;const SLOPE_NONE="SLOPE_NONE";_exports.SLOPE_NONE=SLOPE_NONE;const MAX_TERRAIN=100;_exports.MAX_TERRAIN=MAX_TERRAIN;var terrain={SLOPE_UP:SLOPE_UP,SLOPE_DOWN:SLOPE_DOWN,SLOPE_NONE:SLOPE_NONE,MAX_TERRAIN:MAX_TERRAIN};_exports.$terrain=terrain;const MORALE_SUCCESS="MORALE_SUCCESS";_exports.MORALE_SUCCESS=MORALE_SUCCESS;const MORALE_FAILURE="STATUS_FALL_BACK";_exports.MORALE_FAILURE=MORALE_FAILURE;class Combatant{constructor({unit,encounter,target,armyLeadership=0,terrainDefense=0,engagedStands=-1,status=MORALE_SUCCESS,slope=SLOPE_NONE}){this.unit=unit;this.encounter=encounter;this.target=target;this.armyLeadership=armyLeadership;this.terrainDefense=terrainDefense;this.engagedStands=-1>=engagedStands||engagedStands>unit.stands?unit.stands:engagedStands;this.status=status;this.slope=slope;this.casualties=0;this.leaderSurviveRoll=Math.random()}get energyLoss(){return this.encounter.secondsSpentFighting/_battleSim.SECONDS_PER_TURN*this.unit.carriedWeight}get moraleLoss(){return 5*(this.casualties/this.unit.strength)}get leadershipLoss(){return this.casualties/this.unit.strength>this.leaderSurviveRoll?_Mathmin(30,this.unit.leadership):0}get terrainSpeedMod(){return(MAX_TERRAIN-this.encounter.terrain)/MAX_TERRAIN}get equipmentMod(){return(_battleSim.MAX_EQUIPMENT_WEIGHT-this.unit.carriedWeight)/_battleSim.MAX_EQUIPMENT_WEIGHT}get speed(){return this.unit.baseSpeed*this.terrainSpeedMod*(0,_battleSim.statModFor)(this.unit.energy)*this.equipmentMod}get backwardsSpeed(){return this.unit.baseBackwardSpeed*this.terrainSpeedMod*(0,_battleSim.statModFor)(this.unit.energy)*this.equipmentMod}get volume(){return this.encounter.melee?this.unit.meleeWeapon.volume:this.unit.rangedWeapon.volume}get modifiedVolume(){return this.volume*this.volumeModifier}get volumeModifier(){return(0,_battleSim.statModFor)(this.unit.energy)*this.engagedMod*this.terrainMod}get targetTroopType(){return this.target.unitType===_battleSim.FOOT_TROOP?_battleSim.POWER_VS_FOOT:_battleSim.POWER_VS_MOUNTED}get weaponTypeForEncounter(){return this.encounter.melee?_battleSim.MELEE_WEAPON:_battleSim.RANGED_WEAPON}get power(){return this.unit[this.weaponTypeForEncounter][this.targetTroopType]}get modifiedPower(){return this.power*this.powerModifier}get skill(){return this.encounter.melee?this.unit.meleeSkill:this.unit.rangedSkill}get armor(){return this.unit.armor.defense}get engagedMod(){return this.engagedStands/this.unit.stands}get unitTypeTerrainMod(){return{[_battleSim.FOOT_TROOP]:1,[_battleSim.CAVALRY_TROOP]:.5,[_battleSim.ARTILLERY_TROOP]:.25}[this.unit.unitType]}get terrainMod(){return(MAX_TERRAIN-this.encounter.terrain)/MAX_TERRAIN*(0,_battleSim.statModFor)(this.unit.openness)*this.unitTypeTerrainMod}get slopeMod(){return{[SLOPE_UP]:.75,[SLOPE_DOWN]:1.25,[SLOPE_NONE]:1}[this.slope]}get powerModifier(){return this.slopeMod}get skillRoll(){return Math.random()*this.skill*(0,_battleSim.statModFor)(this.unit.energy)}get powerRoll(){return Math.random()*this.modifiedPower}get armorRoll(){return Math.random()*this.armor}attacksForTime(duration){return this.unit.strength*this.modifiedVolume*(duration/_battleSim.SECONDS_IN_AN_HOUR)}performMoraleCheck(){const roll=100*(0,_battleSim.weightedRandom)(3),modifiedMorale=this.unit.morale-roll;if(0<modifiedMorale){this.status=MORALE_SUCCESS}else{this.status=MORALE_FAILURE}}battleReport(){return`${this.casualtyMessage}`}exactBattleReport(){return`${this.unit.name} -- ${this.status} -- Casualties: ${this.casualties} -- Energy Loss: ${this.energyLoss} -- Morale Loss: ${this.moraleLoss} -- Leadership Loss: ${this.leadershipLoss}`}updates(delay){return{id:this.unit.id,changes:this.changes(delay)}}changes(delay){return[{prop:"strength",value:this.unit.strength-this.casualties},{prop:"energy",value:this.unit.energy-this.energyLoss},{prop:"morale",value:this.unit.morale-this.moraleLoss},{prop:"leadership",value:this.unit.leadership-this.leadershipLoss},{prop:"nextAction",value:this.unit.nextAction+delay}]}get casualtyMessage(){if(this.casualties>this.unit.strength){return`${this.unit.name} was totally destroyed.`}else if(this.casualties>.75*this.unit.strength){return`${this.unit.name} sustained terrible casualties. Almost the whole unit was destroyed.`}else if(this.casualties>.5*this.unit.strength){return`${this.unit.name} sustained terrible casualties. Over half the unit is destroyed.`}else if(this.casualties>.3*this.unit.strength){return`${this.unit.name} sustained terrible casualties.`}else if(this.casualties>.2*this.unit.strength){return`${this.unit.name} sustained grave casualties.`}else if(this.casualties>.15*this.unit.strength){return`${this.unit.name} sustained massive casualties.`}else if(this.casualties>.1*this.unit.strength){return`${this.unit.name} sustained major casualties.`}else if(this.casualties>.5*this.unit.strength){return`${this.unit.name} sustained significant casualties.`}else if(this.casualties>.03*this.unit.strength){return`${this.unit.name} sustained noticable casualties.`}else if(this.casualties>.01*this.unit.strength){return`${this.unit.name} sustained minor casualties.`}else{return`${this.unit.name} sustained almost no casualties.`}}}_exports.$combatantDefault=Combatant;var combatant={MORALE_SUCCESS:MORALE_SUCCESS,MORALE_FAILURE:MORALE_FAILURE,default:Combatant};_exports.$combatant=combatant;function getRadioVal(container,name){for(var val,radios=container.querySelectorAll(`[name="${name}"]`),i=0,len=radios.length;i<len;i++){if(radios[i].checked){val=radios[i].value;break}}return val}var domUtils={getRadioVal:getRadioVal};_exports.$domUtils=domUtils;class Encounter{constructor({attacker,attackerTerrainDefense=0,attackerArmyLeadership=0,attackerEngagedStands=-1,defender,defenderTerrainDefense=0,defenderArmyLeadership=0,defenderEngagedStands=-1,melee=!0,separation=0,terrain=0,slope=SLOPE_NONE}){this.melee=melee;this.separation=separation;this.terrain=terrain;this.slope=slope;this.attacker=new Combatant({unit:attacker,encounter:this,target:defender,attackerTerrainDefense,attackerArmyLeadership,attackerEngagedStands,slope:this.attackerSlope});this.defender=new Combatant({unit:defender,encounter:this,target:attacker,defenderTerrainDefense,defenderArmyLeadership,defenderEngagedStands,slope:this.defenderSlope})}attackerAttacks(){if(this.attacker.status===MORALE_SUCCESS){this.attacker.casualties=(0,_battleSim.attack)({attacker:this.attacker,defender:this.defender,duration:this.secondsSpentFighting});return``}else{return`${this.attacker.name} refused to attack.`}}defenderAttacks(){if(this.attacker.status===MORALE_SUCCESS){this.defender.casualties=(0,_battleSim.attack)({attacker:this.defender,defender:this.attacker,duration:this.secondsSpentFighting});return``}else{return`${this.defender.name} refused to stand and defend.`}}attackerEngages(){const attackerMessage=this.attackerAttacks(),defenderMessage=this.defenderAttacks();if(1<this.inchesDefenderFled){return`${attackerMessage} ${this.defender.unit.name} fell back ${this.inchesDefenderFled} inches but was then caught by ${this.attacker.unit.name}. ${this.timeEngagedMessage}`}else if(this.defenderFled){return`${this.defender.unit.name} attempted to fall back but was quickly caught by ${this.attacker.unit.name}. ${this.timeEngagedMessage}`}else{return`${this.defender.unit.name} held it's ground against ${this.attacker.unit.name}. ${this.timeEngagedMessage}`}}defenderRunsAway(){if(this.defenderFled){return`${this.defender.unit.name} fell back ${this.inchesDefenderFled} inches and ${this.attacker.unit.name} could not reach it's target but is now ${this.inchesOfSeparationAfter} inches behind.`}else{return`${this.attacker.unit.name} could not reach ${this.defender.unit.name} but made it a distance of ${this.inchesAttackerTravelled} inches towards it's target.`}}fight(){this.attacker.performMoraleCheck();this.defender.performMoraleCheck();const actionMessage=this.attackerReachedDefender?this.attackerEngages():this.defenderRunsAway(),fullMessage=`${actionMessage} ${this.defender.battleReport()} ${this.attacker.battleReport()}`;return{messages:[fullMessage],updates:[this.defender.updates(_battleSim.SECONDS_PER_TURN),this.attacker.updates(_battleSim.SECONDS_PER_TURN+(0,_battleSim.randomMinutesBetween)(5,10))]}}get timeEngagedMessage(){return`They were engaged for ${this.minutesSpentFighting} minutes.`}get attackerSlope(){return this.slope}get defenderSlope(){if(this.slope===SLOPE_UP){return SLOPE_DOWN}else if(this.slope===SLOPE_DOWN){return SLOPE_UP}else{return SLOPE_NONE}}get yardsOfSeparation(){return this.separation*_battleSim.YARDS_PER_INCH}get yardsOfSeparationAfter(){if(0<this.secondsToReachDefender){return 0}else{return this.separation+this.defender.backwardsSpeed*this.secondsAvailableAfterOrder-this.attacker.speed*this.secondsAvailableAfterOrder}}get inchesOfSeparationAfter(){return _Mathceil(this.yardsOfSeparationAfter/_battleSim.YARDS_PER_INCH)}get yardsDefenderFled(){if(this.defender.status===MORALE_FAILURE){const timeAvailableToFlee=this.secondsAvailableAfterOrder-.5*this.separation/this.attacker.speed;return timeAvailableToFlee*this.backwardsSpeed}else{return 0}}get inchesDefenderFled(){return _Mathceil(this.yardsDefenderFled/_battleSim.YARDS_PER_INCH)}get yardsAttackerTravelled(){if(this.melee){return this.attacker.speed*this.secondsToReachDefenderOrMax}else{return 0}}get inchesAttackerTravelled(){return Math.floor(this.yardsAttackerTravelled/_battleSim.YARDS_PER_INCH)}get secondsAvailableAfterOrder(){return _battleSim.SECONDS_PER_TURN-this.attacker.unit.secondsToIssueOrder}get secondsToReachDefender(){if(this.defender.status===MORALE_FAILURE){return this.yardsOfSeparation/(this.attacker.speed-this.defender.backwardsSpeed)}else{return this.yardsOfSeparation/this.attacker.speed}}get secondsToReachDefenderOrMax(){return _Mathmin(this.secondsToReachDefender,this.secondsAvailableAfterOrder)}get attackerReachedDefender(){return 0<this.secondsSpentFighting}get defenderFled(){return 0<this.yardsDefenderFled}get secondsSpentFighting(){if(this.melee){return this.secondsAvailableAfterOrder-this.secondsToReachDefender}else{return this.secondsAvailableAfterOrder}}get minutesSpentFighting(){return _Mathceil(this.secondsSpentFighting/_battleSim.SECONDS_IN_AN_MINUTE)}}_exports.$encounterDefault=Encounter;var encounter={default:Encounter};_exports.$encounter=encounter;const REST="REST",MOVE="MOVE",CHARGE="CHARGE",FIRE="FIRE";class FightView extends(0,_battleSim.connect)(_battleSim.store)(_battleSim.PageViewElement){static get properties(){return{_unit:{type:Object},_hasActiveBattle:{type:Boolean},_actionMessages:{type:Array},_date:{type:Object}}}static get styles(){return[_battleSim.SharedStyles,_battleSim.ButtonSharedStyles,_battleSim.css`
        #unit {
          text-align: center;
          font-size: 2rem;
        }
        #army {
          text-align: center;
          color: var(--app-muted-text-color);
        }
        #time-of-day {
          text-align: center;
          color: var(--app-muted-text-color);
        }
        #action-result {
          display: none;
        }
        h6 {
          margin-bottom: 0;
        }
      `]}render(){return _battleSim.html`
      ${this._hasActiveBattle?_battleSim.html`
        <section>
          <div>
            <div id="unit">${this._unit.name}</div>
            <div id="army">Army: ${this._unit.army.name}</div>
            <div id="time-of-day">${(0,_battleSim.prettyDateTime)(this._date)}</div>
          </div>
          <h6>Unit Status</h6>
          <p>${this._unit.detailedStatus}</p>

          <h6>Unit Description</h6>
          <p>${this._unit.desc}</p>
        </section>
        <section>
          <div id="actions">
            <button @click="${this._rest}" id="rest">Rest</button>
            <button @click="${this._move}" id="move">Move</button>
            <button @click="${this._charge}" id="charge">Charge</button>
            <button @click="${this._fire}" id="fire">Fire</button>
          </div>
        </section>
        <section>
          <div id="input-container">
            <input id="distance" class="hidden" type="number" placeholder="Distance (Leave blank to move as far as possible)"></input>
            <input id="separation" class="hidden" type="number" placeholder="Distance to enemy unit"></input>
            <input id="engaged-attackers" class="hidden" type="number" placeholder="Engaged Attacking Stands (Leave blank for all)"></input>
            <input id="engaged-defenders" class="hidden" type="number" placeholder="Engaged Defending Stands (Leave blank for all)"></input>
            <select id="target" class="hidden">
              <option value="">Select Target</option>
              ${(0,_battleSim.repeat)(this._unit.targets,target=>_battleSim.html`
                <option value="${target.id}">${target.unit.name}</option>
              `)}
            </select>
            <br>
            <br>
            <div id="hill" class="hidden">
              <radiogroup>
                <input type="radio" name="hill" value="${SLOPE_UP}"> Uphill<br>
                <input type="radio" name="hill" value="${SLOPE_DOWN}"> Downhill<br>
                <input type="radio" name="hill" value="${SLOPE_NONE}"> Neither<br><br>
              </radiogroup>
            </div>
            <div id="leader" class="hidden">
              <radiogroup>
                <input type="radio" name="leader" value="general"> General<br>
                <input type="radio" name="leader" value="subcommander"> Subcommander<br>
                <input type="radio" name="leader" value="neither"> None<br><br>
              </radiogroup>
            </div>
            <div id="terrain" class="hidden">
              <input type="checkbox" id="terrain-checkbox"></input>
              <label for="terrain-checkbox">Difficult Terrain</label>
            </div>
          <div>
          <div id="take-action" style="opacity: 0;">
            <button @click="${this._takeAction}">Take Action</button>
            <p class="error hidden">You must provide valid values for each field</p>
          </div>
          <div id="action-result">
            ${(0,_battleSim.repeat)(this._actionMessages,message=>_battleSim.html`
              <p>${message}</p>
            `)}
            <p id="action-message"></p>
            <button @click="${this._progressToNextAction}">Next Action</button>
          </div>
        </section>
      `:_battleSim.html`
        <section>
          <p>No active battle. Go to the war tab and either select a battle or create a new battle.</p>
        </section>
      `}
    `}get distanceElement(){return this.shadowRoot.getElementById("distance")}get separationElement(){return this.shadowRoot.getElementById("separation")}get engagedAttackingElement(){return this.shadowRoot.getElementById("engaged-attackers")}get engagedDefendingElement(){return this.shadowRoot.getElementById("engaged-defenders")}get hillContainer(){return this.shadowRoot.getElementById("hill")}get leaderContainer(){return this.shadowRoot.getElementById("leader")}get terrainContainer(){return this.shadowRoot.getElementById("terrain")}get targetElement(){return this.shadowRoot.getElementById("target")}get errorElement(){return this.shadowRoot.querySelector(".error")}get distance(){return parseInt(""===this.distanceElement.value?0:this.distanceElement.value)}get separation(){return parseInt(this.separationElement.value?this.separationElement.value:0)}get engagedAttackers(){return parseInt(""===this.engagedAttackingElement.value?0:this.engagedAttackingElement.value)}get engagedDefenders(){return parseInt(""===this.engagedDefendingElement.value?0:this.engagedDefendingElement.value)}get slope(){const radioVal=getRadioVal(this.shadowRoot.getElementById("input-container"),"hill");return radioVal?radioVal:SLOPE_NONE}get generalNearby(){return"general"===getRadioVal(this.shadowRoot.getElementById("input-container"),"leader")}get subcommanderNearby(){return"subcommander"===getRadioVal(this.shadowRoot.getElementById("input-container"),"leader")}get terrain(){return this.terrainContainer.querySelector("input").checked}get target(){return parseInt(this.targetElement.value)}get terrainModifier(){if(this.uphill&&this.terrain){return 60}else if(this.uphill){return 40}else if(this.terrain){return 20}else{return 0}}get validSituation(){if(this._selectedAction===REST){return!0}else if(this._selectedAction===MOVE){return!0}else if(this._selectedAction===CHARGE){return!isNaN(this.target)}else if(this._selectedAction===FIRE){return!isNaN(this.target)}else{return!1}}get _actionMessageElement(){return this.shadowRoot.getElementById("action-message")}_progressToNextAction(){_battleSim.store.dispatch((0,_battleSim.takeAction)(this._actionUpdates));this._actionUpdate={};this.shadowRoot.getElementById("actions").style.display="block";this.shadowRoot.getElementById("take-action").style.display="block";this.shadowRoot.getElementById("action-result").style.display="none";this._actionMessageElement.innerText=""}_takeAction(){if(this.validSituation){let actionResult;if(this._selectedAction===REST){actionResult=this._unit.rest()}else if(this._selectedAction===MOVE){actionResult=this._unit.move(100*this.distance,this.terrainModifier)}else{let defendingUnit=new _battleSim.$unitDefault(this._activeBattle.units[this.target],this.target),encounter=new Encounter({attacker:this._unit,attackerTerrainDefense:0,attackerArmyLeadership:0,attackerEngagedStands:this.engagedAttackers,defender:defendingUnit,defenderTerrainDefense:0,defenderArmyLeadership:0,defenderEngagedStands:this.engagedAttackers,melee:this._selectedAction===CHARGE,separation:this.separation,terrain:this.terrainModifier,slope:this.slope});actionResult=encounter.fight()}this._actionMessages=actionResult.messages;this._actionUpdates=actionResult.updates;this._removeSelection();this.shadowRoot.getElementById("move").style.opacity=1;this.shadowRoot.getElementById("charge").style.opacity=1;this.shadowRoot.getElementById("rest").style.opacity=1;this.shadowRoot.getElementById("fire").style.opacity=1;this.shadowRoot.getElementById("take-action").style.opacity=0;this.distanceElement.value="";this.separationElement.value="";this.engagedAttackingElement.value="";this.engagedDefendingElement.value="";this.hillContainer.querySelectorAll("input").forEach(input=>input.checked=!1);this.leaderContainer.querySelectorAll("input").forEach(input=>input.checked=!1);this.terrainContainer.querySelector("input").checked=!1;this.targetElement.value="";this.shadowRoot.getElementById("take-action").style.display="none";this.shadowRoot.getElementById("actions").style.display="none";this.shadowRoot.getElementById("action-result").style.display="block"}else{this.errorElement.style.opacity="1";this.errorElement.style.display="block";setTimeout(()=>{this.errorElement.style.opacity="0";this.errorElement.style.display="none"},3e3)}}_removeSelection(){[...this.shadowRoot.querySelectorAll("button")].forEach(button=>button.classList.remove("selected"));this.distanceElement.classList.add("hidden");this.separationElement.classList.add("hidden");this.engagedAttackingElement.classList.add("hidden");this.engagedDefendingElement.classList.add("hidden");this.hillContainer.classList.add("hidden");this.leaderContainer.classList.add("hidden");this.terrainContainer.classList.add("hidden");this.targetElement.classList.add("hidden")}_move(e){this._removeSelection();e.target.classList.add("selected");this.distanceElement.classList.remove("hidden");this.hillContainer.classList.remove("hidden");this.leaderContainer.classList.remove("hidden");this.terrainContainer.classList.remove("hidden");this.shadowRoot.getElementById("move").style.opacity=1;this.shadowRoot.getElementById("charge").style.opacity=.5;this.shadowRoot.getElementById("rest").style.opacity=.5;this.shadowRoot.getElementById("fire").style.opacity=.5;this.shadowRoot.getElementById("take-action").style.opacity=1;this._selectedAction=MOVE}_charge(e){this._removeSelection();e.target.classList.add("selected");this.separationElement.classList.remove("hidden");this.engagedAttackingElement.classList.remove("hidden");this.engagedDefendingElement.classList.remove("hidden");this.hillContainer.classList.remove("hidden");this.leaderContainer.classList.remove("hidden");this.terrainContainer.classList.remove("hidden");this.targetElement.classList.remove("hidden");this.shadowRoot.getElementById("move").style.opacity=.5;this.shadowRoot.getElementById("charge").style.opacity=1;this.shadowRoot.getElementById("rest").style.opacity=.5;this.shadowRoot.getElementById("fire").style.opacity=.5;this.shadowRoot.getElementById("take-action").style.opacity=1;this._selectedAction=CHARGE}_rest(e){this._removeSelection();e.target.classList.add("selected");this.shadowRoot.getElementById("move").style.opacity=.5;this.shadowRoot.getElementById("charge").style.opacity=.5;this.shadowRoot.getElementById("rest").style.opacity=1;this.shadowRoot.getElementById("fire").style.opacity=.5;this.shadowRoot.getElementById("take-action").style.opacity=1;this._selectedAction=REST}_fire(e){this._removeSelection();e.target.classList.add("selected");this.separationElement.classList.remove("hidden");this.engagedAttackingElement.classList.remove("hidden");this.engagedDefendingElement.classList.remove("hidden");this.hillContainer.classList.remove("hidden");this.leaderContainer.classList.remove("hidden");this.terrainContainer.classList.remove("hidden");this.targetElement.classList.remove("hidden");this.shadowRoot.getElementById("move").style.opacity=.5;this.shadowRoot.getElementById("charge").style.opacity=.5;this.shadowRoot.getElementById("rest").style.opacity=.5;this.shadowRoot.getElementById("fire").style.opacity=1;this.shadowRoot.getElementById("take-action").style.opacity=1;this._selectedAction=FIRE}stateChanged(state){this._actionMessages=[];if(state.battle.battles.length>state.battle.activeBattle){this._activeBattle=state.battle.battles[state.battle.activeBattle];this._unit=new _battleSim.$unitDefault(this._activeBattle.units[this._activeBattle.activeUnit],this._activeBattle.activeUnit);this._date=new Date(this._activeBattle.startTime+1e3*this._activeBattle.second);this._hasActiveBattle=!0}else{this._hasActiveBattle=!1}}}window.customElements.define("fight-view",FightView)});